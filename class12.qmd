---
title: "Class 12: Bioconductor"
author: "Garrett Cole"
format: pdf
---
# Import countData and colData
```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```
```{r}
head(counts)
head(metadata)
```
## Question 1: How many genes are in this dataset?
38,694
## Question 2: How many 'control' cell lines do we have?
4
# Toy differential gene expression
```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```
```{r}
#Finding mean
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```
## Question 3: How would you make the above code in either approach more robust?
```{r}
control <- metadata[metadata$dex == "control", ]
control.counts <- counts[, control$id]
control.mean <- rowMeans(control.counts)
head(control.mean)
```
## Question 4: Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)
```{r}
treated <- metadata[metadata$dex == "treated", ]
treated.counts <- counts[, treated$id]
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```
```{r}
#Combine meancount data
meancounts <- data.frame(control.mean, treated.mean)
```
## Question 5a: Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.
```{r}
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated")
```
## Question 5b: .You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?
You would use geom_point for this plot
```{r}
library(ggplot2)
ggplot(meancounts) + aes( control.mean, treated.mean) + geom_point()
```
## Question 6: Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?
The argument to plot() should be log2(meancounts)
```{r}
ggplot(log2(meancounts)) + aes(control.mean, treated.mean, xlab = "log control counts", ylab = "log treated counts") + geom_point()
```
```{r}
#Calculate log2foldchange for mean counts
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```
```{r}
#Filter out the zero expression genes
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```
## Question 7: What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?
The purpose of the arr.ind argument in the which() function called above is to compare which genes and sample both have zero counts and will ignore any genes with zero counts. Unique will act as a safety check and double check there are no zero entries that slippped through

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
sum(up.ind)
sum(down.ind)
```

## Question 8: Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?
250 up regulated genes

## Question 9: Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 
367 down regulated genes

## Question 10: Do you trust these results? Why or why not?
No, they are not significantly proven yet so they could be misleading and thus I do not trust.

# DESeq2 Analysis
```{r}
library(DESeq2)
citation("DESeq2")
```
```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```
```{r}
dds <- DESeq(dds)
```
```{r}
res <- results(dds)
res
```

```{r}
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```
```{r}
columns(org.Hs.eg.db)
```
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```
```{r}
head(res)
```
## Question 11: Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```
```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```
```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```
```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```
```{r}
library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```
```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)

attributes(keggres)
```
```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```
```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)
```

## Question 12: Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?
Yes you can basically do the same procedure as above but you must interchange with the top 2 down-regulated pathway information
